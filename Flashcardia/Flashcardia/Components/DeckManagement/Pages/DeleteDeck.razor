
@page "/DeckManagement/DeleteDeck/"

@using System.ComponentModel.DataAnnotations

@inject IWriteDeck WriteDeck
@inject NavigationManager NavigationManager
@inject UserStateProvider UserStateProvider

<div class="text-center">
    <h2 class="h2">Delete Deck</h2>
    <h3 class="h6">@UserState.SelectedDeck?.Name</h3>
    <hr class="mb-3" />
    <p>confirm by typing in @Input.ConfirmDelete</p>
    <EditForm Model="Input" method="post" OnValidSubmit="RemoveDeck" FormName="create-deck">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger text-center" role="alert" />
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.DeckName" class="form-control" />
            <label for="name">Deck Name</label>
            @* <ValidationMessage For="() => Input.DeckName" class="text-danger" /> *@
        </div>
        <button type="submit" class="btn btn-danger mt-4 mb-3 w-100" style="max-width: 375px;">Delete Deck</button>
    </EditForm>
    <a class="btn btn-secondary w-100" style="max-width: 375px;" href="/DeckManagement/">Deck Menu</a>
</div>

@code {

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private UserState UserState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        UserState = await UserStateProvider.Get();
        Input.ConfirmDelete = "DELETE/" + UserState.SelectedDeck!.Name;
        await base.OnInitializedAsync();
    }

    private async Task RemoveDeck()
    {
        await WriteDeck.Delete(UserState.SelectedDeck!);
        NavigationManager.NavigateTo("/DeckManagement");
    }

    private class InputModel
    {
        [Compare("ConfirmDelete", ErrorMessage = "the text given does not match")]
        public string DeckName { get; set; } = string.Empty;

        public string ConfirmDelete { get; set; } = string.Empty;

    }
}