
@page "/DeckManagement/CreateDeck/"

@using Flashcardia.Repostories

@inject DeckWriter DeckWriter
@inject NavigationManager NavigationManager
@inject UserStateProvider UserStateProvider

<div class="text-center">
    <h2 class="h2">Create Deck</h2>
    <hr class="mb-3" />
    <EditForm Model="Input" method="post" OnValidSubmit="AddDeck" FormName="create-deck">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.DeckName" class="form-control" />
            <label for="name">Deck Name</label>
            <ValidationMessage For="() => Input.DeckName" class="text-danger" />
        </div>
        <button type="submit" class="btn btn-success w-100" style="max-width: 375px;">Create Deck</button>
    </EditForm>
    <button type="submit" class="btn btn-secondary w-100" style="max-width: 375px;">Deck Menu</button>
</div>

@code {

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private UserState UserState { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        UserState = await UserStateProvider.Get();
        await base.OnInitializedAsync();
    }

    private async Task AddDeck()
    {
        Deck deck = new Deck();
        deck.UserId = UserState!.User!.Id;
        deck.Name = Input.DeckName;
        await DeckWriter.Create(deck);
        NavigationManager.NavigateTo("/DeckManagement");
    }

    private class InputModel
    {
        public string DeckName { get; set; } = string.Empty;
    }
}
