@page "/DeckManagement/"

@inject IReadDecks ReadDecks
@inject UserStateProvider UserStateProvider

<PageTitle>Decks</PageTitle>

<div class="text-center">
    <h2 class="h2">Deck Menu</h2>
    <hr class="mb-3" />
    @if (Decks.Any() == false)
    {
        <p class="mb-3">create a deck</p>
    }
    else
    {
        <ul class="list-group m-5">
            @foreach (Deck deck in Decks)
            {
                if (UserState.SelectedDeck != null && deck.Id.Equals(UserState.SelectedDeck.Id))
                {
                    <li class="list-group-item mb-3 rounded active border border-1 border-dark" @onclick="DeselectDeck">
                        @deck.Name
                    </li>
                }
                else
                {
                    <li class="list-group-item mb-3 rounded border border-1 border-dark" @onclick="() => SelectDeck(deck)">
                        @deck.Name
                    </li>
                }

            }
        </ul>
    }
    
    <div class="d-flex flex-column justify-content-center align-items-center">
        @if (UserState?.SelectedDeck != null)
        {
            <a class="btn btn-primary m-2 w-100" style="max-width: 375px;" href="/CardPractice">Open Deck</a>
            <a class="btn btn-success m-2 w-100" style="max-width: 375px;" href="/DeckManagement/CreateDeck">Create Deck</a>
            <a class="btn btn-danger m-2 w-100" style="max-width: 375px;" href="/DeckManagement/DeleteDeck">Delete Deck</a>
        }
        else
        {
            <a class="btn btn-success m-2 w-100" style="max-width: 375px;" href="/DeckManagement/CreateDeck">Create Deck</a>
        }
        <a class="btn btn-secondary m-2 w-100" style="max-width: 375px;" href="/">Home</a>
    </div>

</div>



@code {

    private UserState UserState { get; set; } = default!;

    private ICollection<Deck> Decks { get; set; } = new List<Deck>();

    protected override async Task OnInitializedAsync()
    {
        UserState = await UserStateProvider.Get();
        UserState.SelectedDeck = null;
        UserState.SelectedCard = null;
        Decks = await ReadDecks.Get(UserState.User!.Id);
    }

    private void SelectDeck(Deck deck)
    {
        UserState.SelectedDeck = deck;
    }

    private void DeselectDeck()
    {
        UserState.SelectedDeck = null;
    }
}
