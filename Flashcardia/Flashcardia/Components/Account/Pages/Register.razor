@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Flashcardia.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager

<PageTitle>Register</PageTitle>

<div class="text-center">
    <h1>Register</h1>
    <hr class="mb-2" />
    <StatusMessage Message="@ErrorMessage"/>
    <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register">
        <DataAnnotationsValidator />
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.UserName" class="form-control" />
            <label for="username">UserName</label>
            <ValidationMessage For="() => Input.UserName" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText @bind-Value="Input.Email" class="form-control" />
            <label for="email">Email</label>
            <ValidationMessage For="() => Input.Email" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.Password" class="form-control"/>
            <label for="password">Password</label>
            <ValidationMessage For="() => Input.Password" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control"/>
            <label for="confirm-password">Confirm Password</label>
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
        </div>
        <div class="checkbox w-100 text-start">
            <label class="form-label ms-2 mb-4">
                <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input " />
                Remember me
            </label>
        </div>
        <button type="submit" class="w-100 btn btn-primary mt-2 mb-3" style="max-width: 375px;">Register</button>
    </EditForm>
        <a class="btn btn-secondary w-100" style="max-width: 375px;" href="/">Home</a>
</div>
@*     <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div> *@

@code {
    private IEnumerable<IdentityError>? IdentityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private string? ErrorMessage { get; set; }

    public async Task RegisterUser(EditContext editContext)
    {
        ApplicationUser user = new();
        user.UserName = Input.UserName;
        user.Email = Input.Email;

        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            ErrorMessage = "Error: " + result.Errors.First().Description;
            return;
        }
        await SignInManager.SignInAsync(user, isPersistent: Input.RememberMe);
        NavigationManager.NavigateTo("/");
    }

    private sealed class InputModel
    {
        [Required]
        [Length(3, 25, ErrorMessage = "Username must be 3 to 25 characters")]
        public string UserName { get; set; } = "";

        [Required]
        [EmailAddress]
        [Length(3, 55, ErrorMessage = "Email must be between 3 and 55 characters")]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        [Length(8, 35, ErrorMessage = "Password must be 8 to 35 characters")]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        public bool RememberMe { get; set; } = false;
    }
}
