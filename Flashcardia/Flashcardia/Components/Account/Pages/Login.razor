@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Flashcardia.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="text-center">
    <h1>Login</h1>
    <hr class="mb-5"/>
<StatusMessage Message="@ErrorMessage" />
<EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />

    <ValidationSummary class="text-danger" role="alert" />
    <div class="form-floating mb-3">
            <InputText @bind-Value="Input.UserName" class="form-control" />
            <label class="form-label">UserName</label>
            <ValidationMessage For="() => Input.UserName" class="text-danger" />
    </div>
    <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="Input.Password" class="form-control" />
        <label class="form-label">Password</label>
        <ValidationMessage For="() => Input.Password" class="text-danger" />
    </div>
    <div class="checkbox">
        <label class="form-label">
            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input float-start" />
            Remember me
        </label>
    </div>
    <div>
        <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
    </div>
</EditForm>
</div>

@*     <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div> *@


@code {
    private string? ErrorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        ApplicationUser? user = await UserManager.FindByNameAsync(Input.UserName);
        if (user is null)
        {
            ErrorMessage = "incorrect user name";
            return;
        }
        SignInResult result = await SignInManager.PasswordSignInAsync(user, Input.Password, Input.RememberMe, false);
        if (result.Succeeded == false)
        {
            ErrorMessage = "incorrect password";
            return;
        }
        RedirectManager.RedirectTo("/");
        
    }

    private sealed class InputModel
    {
        [Required] 
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; } = false;
    }
}
