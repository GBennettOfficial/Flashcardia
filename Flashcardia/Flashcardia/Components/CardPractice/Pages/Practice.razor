@page "/CardPractice/"

@using Flashcardia.Components.CardPractice.Shared
@using Flashcardia.Repostories

@inject NavigationManager NavigationManager
@inject UserStateProvider UserStateProvider
@inject CardListReader CardListReader
@inject CardWriter CardWriter

<div class="text-center">
    <h2 class="h2">Practice</h2>
    <h3 class="h6">@UserState.SelectedDeck!.Name</h3>
    <hr class="mb-3" />
    @if (Cards.Any() == false)
    {
        <h6 class="mt-3 mb-3">deck empty</h6>
        <a class="btn btn-success w-100 mb-3" style="max-width: 375px;" href="/CardPractice/CreateCard">Create Card</a>
    }
    else
    {
        <p>click card to flip</p>
        <div class="mb-5 mt-3 w-100" style="height: 40vh;">
            <FlipCard Front="@UserState.SelectedCard!.Front" Back="@UserState.SelectedCard.Back" />
        </div>
        <a class="btn btn-primary w-100 mt-3 mb-3" style="max-width: 375px;" @onclick="GrabNextCard">Next</a>
        <a class="btn btn-success w-100 mb-3" style="max-width: 375px;" href="/CardPractice/CreateCard">Create Card</a>
        <a class="btn btn-danger w-100 mb-3" style="max-width: 375px;" @onclick="() => Delete()">Delete Card</a>
    }
    <a class="btn btn-secondary w-100 mb-3" style="max-width: 375px;" href="/DeckManagement">Deck Menu</a>
</div>

@code {

    private UserState UserState { get; set; } = default!;

    private List<Card> Cards { get; set; } = new();

    private Card? CurrentCard { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        UserState = await UserStateProvider.Get();
        Cards = (await CardListReader.Get(UserState.SelectedDeck!.Id))
            .ToList();

        if (Cards.Any())
        {
            Shuffle();
            GrabNextCard();
        }

    }

    Random Random = new();

    private int Index = 0;

    private void GrabNextCard()
    {
        int cardCount = Cards.Count;
        if (cardCount == 0)
        {
            UserState.SelectedCard = null;
            return;
        }
        Index++;
        if (Index > cardCount - 1)
        {
            Index = 0;
        }
        CurrentCard = Cards![Index];
        UserState.SelectedCard = CurrentCard;
    }

    private void Shuffle()
    {
        Cards = Cards.OrderBy(x => Random.Next()).ToList();
        Index = 0;
    }

    private async Task Delete()
    {
        Cards.Remove(CurrentCard!);
        await CardWriter.Delete(CurrentCard!);

        if (Cards.Any())
        {
            GrabNextCard();
        }
        else
        {
            CurrentCard = null;
        }

    }

}
