@page "/CardPractice/CreateCard/"

@using Flashcardia.Repostories

@inject UserStateProvider UserStateProvider
@inject CardWriter CardWriter
@inject NavigationManager NavigationManager


<div class="text-center">
    <h3>Create Card</h3>
    <h6 class="mb-5">@UserState.SelectedDeck!.Name</h6>
    <EditForm Model="Input" method="post" OnValidSubmit="AddCard" FormName="create-card" >
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" role="alert" />
        <div class="form-floating mb-3">
            <InputTextArea @bind-Value="Input.Front" class="form-control" style="min-height: 320px;" />
            <label for="name">Front</label>
            <ValidationMessage For="() => Input.Front" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputTextArea @bind-Value="Input.Back" class="form-control" style="min-height: 320px;" />
            <label for="name">Back</label>
            <ValidationMessage For="() => Input.Back" class="text-danger" />
        </div>
        <button type="submit" class="btn btn-success w-100" style="max-width: 375px;">Create Card</button>
    </EditForm>
    <a class="btn btn-secondary w-100 mt-5" style="max-width: 375px;" href="/CardPractice/">Practice</a>
</div>


@code {

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private UserState UserState { get; set; } = default!;

    public async Task AddCard()
    {
        Card card = new();
        card.Front = Input.Front;
        card.Back = Input.Back;
        card.DeckId = UserState.SelectedDeck!.Id;
        await CardWriter.Create(card);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        UserState = await UserStateProvider.Get();
        
    }

    private class InputModel
    {
        public string Front { get; set; } = string.Empty;
        public string Back { get; set; } = string.Empty;
    } 
}